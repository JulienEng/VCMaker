!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine out_quantics(&
              &q_size&
!              &q_freq,&     ! freq (from mod_input)
!              &q_kappa,&    ! kappa_grad or kappa_dist  (from mod_grad / mod_disp)
!              &n_qmode,&    !Read from input
!              &n_qstate,&   !n_grad or n_geo (from mod_grad / mod_disp)
       !       &qmode,&    !Read from input
        !      &qlabel,&   !Read from input
 !             &n_lambda&   !n_lambda   (from mod_lambda)
 !             &lambda,&   !lambda     (from mod_lambda)
 !             &lambda_pairs,&   ! lambda_pairs  (from mod_lambda)
!              &q_eshift,&   !need to be added! <<<<
              &)
use mod_quantics
use mod_input
use mod_constants
use mod_grad
use mod_disp
use mod_lambda
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      implicit none
      double precision,dimension(3*n_at,q_size)::q_kappa
      !Looping Louis
      integer::i,j,k
      integer::q_size
      ! FORMATTING VARIABLES
      character(len=60)::FMT1
      character(len=100)::tmp1,tmp2

      OPEN(668,file='output.quantics.op')

      if(log_grad) then
        q_kappa=kappa_grad
      else if (log_disp) then
        q_kappa=kappa_dist
      else
        write(668,*)"WHAT?"
      end if
     

      Write(668,*)
      Write(668,*) '###################################################################'
      Write(668,*) '#                                                                 #'
      write(668,*)  '#  ██╗   ██╗ ██████╗███╗   ██',&
      &'█╗ █████╗ ██╗  ██╗███████╗██████╗    #'
      write(668,*)  '#  ██║   ██║██╔════╝████╗ ███',&
      &'█║██╔══██╗██║ ██╔╝██╔════╝██╔══██╗   #'
      write(668,*)  '#  ██║   ██║██║     ██╔████╔█',&
      &'█║███████║█████╔╝ █████╗  ██████╔╝   #'
      write(668,*)  '#  ╚██╗ ██╔╝██║     ██║╚██╔╝██',&
      &'║██╔══██║██╔═██╗ ██╔══╝  ██╔══██╗   #'
      write(668,*)  '#   ╚████╔╝ ╚██████╗██║ ╚═╝ ██',&
      &'║██║  ██║██║  ██╗███████╗██║  ██║   #'
      write(668,*)  '#    ╚═══╝   ╚═════╝╚═╝     ╚═╝',&
      &'╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝   #'
      Write(668,*) '#    Generated this Quantics operator file                        #'
      Write(668,*) '###################################################################'
      Write(668,*)
      write(668,'(A17)')  'OP_DEFINE-SECTION'
      write(668,'(A5)')   'title'
      write(668,'(A40)')  'MCTDH-Operator-file generated by VCMaker'
      write(668,'(A9)')   'end-title'
      write(668,'(A21)')  'END-OP_DEFINE-SECTION'
      Write(668,*)
      Write(668,'(A17)')  'PARAMETER-SECTION'
      write(668,*)
      WRITE(668,'(A13)')  ' #FREQUENCIES'
      write(668,*)

      do i=1,n_qmode
                write(668,'(t2,A3,i0,t15,A1,t17,F12.3,t29,A6)') &
                'w_m',qmode(i),'=', 1/(2*pi*c)*dsqrt(freq(qmode(i)+6)*hartoJ/(bohrtom**2*amu)),', cm-1'     ! +6 ensures that mode 1 is the mode with the lowest non zero frequency
      end do
        write(668,*)
        WRITE(668,'(A30)') ' #VERTICAL ENERGIES           '
      do k=1,n_qstate
        write(668,'(t2,A3,i0,t15,A1,t17,F12.3,t29,A4)') &
          &'e_s',qstate(k),'=',  qnrj(k),', eV'
      end do
      
      write(668,*)
      write(668,*) '#Kappas are labeled: k_state_mode'
      write(668,*)
      
      do k=1,n_qstate
        WRITE(668,'(A8,I2)') '  #STATE  ',qstate(k)
        write(668,*)
        do j=1,n_qmode                 
                    IF(qlabel(j)(1:1).eq.'K'.OR.qlabel(j)(2:2).eq.'K') then 
          write(668,'(t2,A3,i0,A2,i0,t15,A1,t17,F12.3,t29,A4)') &
          & 'k_s',qstate(k),'_m',qmode(j),'=', q_kappa(qmode(j)+6,qstate(k)),', eV'
          END IF 
        end do
      write(668,*)
      end do

      if (log_lambda) then
        WRITE(668,*) '#INTERSTATE VIBRONIC COUPLING'
        do k=1,n_lambda
          WRITE(668,'(A15,i0,A11,i0)') '#Between STATE ',lambda_pairs(k,1),' AND STATE ',lambda_pairs(k,2)
          do j=1,n_qmode
            IF(qlabel(j)(1:1).eq.'L'.OR. qlabel(j)(2:2).eq.'L') then !!! IF
              write(668,'(t2,A3,i0,A1,i0,A2,i0,t15,A1,t17,F12.3,t29,A4)') &
              &'l_s',lambda_pairs(k,1),'s',lambda_pairs(k,2),'_m',qmode(j),'=', lambda(qmode(j)+6,k),', eV'
            end if
          end do
          write(668,*)
        end do
      end if  

      Write(668,'(A21)') 'END-PARAMETER-SECTION'
      write(668,*)
      write(668,*)


      Write(668,'(A19)') 'HAMILTONIAN-SECTION'

      write(tmp1,'(A7)') 'modes |'
      do i=1,n_qmode         
        write(tmp2,'(A2,i0,A2)') ' m',qmode(i),' |'
        write(tmp1,*) TRIM(ADJUSTL(tmp1))//TRIM(tmp2)
      end do
        write(tmp2,'(A5)') ' el |'
        write(tmp1,*) TRIM(ADJUSTL(tmp1))//TRIM(tmp2)

        write(tmp2,*) ! Reset the string
      do i=1,LEN(TRIM(ADJUSTL(tmp1)))
        write(tmp2,*) TRIM(ADJUSTL(tmp2))//'-'
      end do

      write(FMT1,'(A2,i0,A1)') '(A',LEN(TRIM(ADJUSTL(tmp1))),')'
      write(668,FMT1) adjustl(tmp2)
      write(668,FMT1) adjustl(tmp1)
      write(668,FMT1) adjustl(tmp2)
      write(668,*)


      write(668,'(A16)') ' #KINETIC ENERGY'
      do i=1,n_qmode
        write(668,'(t2,A8,i0,t18,A1,i0,t22,A4)') &
        &'-0.5*w_m',qmode(i),'|',i,'dq^2'
      end do
      write(668,*)
      WRITE(668,'(A22)') ' #REF POTENTIAL ENERGY'
      do i=1,n_qmode
        write(668,'(t3,A7,i0,t18,A1,i0,t22,A3)') '0.5*w_m',qmode(i),'|',i,'q^2'
      end do
      write(668,*)
      WRITE(668,'(A14)') ' #W: Oth ORDER'
      do k=1,n_qstate
               write(668,'(t3,A3,i0,t28,A1,i0,t32,A1,i0,A1,i0)') &
               & 'e_s',qstate(k),'|',n_qmode+1,'S',k,'&',k
      end do

      write(668,*)
      WRITE(668,'(A14)') ' #W: 1st ORDER'
      do k=1,n_qstate
        WRITE(668,'(A8,I2)') '  #STATE  ',k
        write(668,*)
        do j=1,n_qmode
          IF(qlabel(j)(1:1).eq.'K'.OR. qlabel(j)(2:2).eq.'K') then !!! IF
                write(668,'(t3,A3,i0,A2,i0,t18,A1,i0,t22,A1,t28,A1,i0,t32,A1,i0,A1,i0)') &
          & 'k_s',qstate(k),'_m',qmode(j),'|',j,'q','|',n_qmode+1,'S',k,'&',k
          END IF 
        end do
        write(668,*)
      end do
      write(668,*)
      if (log_lambda) then
        WRITE(668,'(A31)') '  #INTERSTATE VIBRONIC COUPLING'
        write(668,*)
        do k=1,n_lambda
          WRITE(668,'(A15,i0,A11,i0)') '#Between STATE ',lambda_pairs(k,1),' AND STATE ',lambda_pairs(k,2)
          write(668,*)
          do j=1,n_qmode
            IF(qlabel(j)(1:1).eq.'L'.OR. qlabel(j)(2:2).eq.'L') then !!! IF
                write(668,'(t3,A3,i0,A1,i0,A2,i0,t18,A1,i0,t22,A1,t28,A1,i0,t32,A1,i0,A1,i0)') &
                & 'l_s',lambda_pairs(k,1),'s',lambda_pairs(k,2),'_m',qmode(j),'|',j,&
                     &'q','|',n_qmode+1,'S',&
                     &lambda_pairs(k,1),'&',lambda_pairs(k,2)
              end if
          end do
          write(668,*)
        end do ! Loop over k
      end if
      write(668,*)
      Write(668,'(A23)') 'END-HAMILTONIAN-SECTION'
      write(668,'(A12)')    'END-OPERATOR'
      

end subroutine
